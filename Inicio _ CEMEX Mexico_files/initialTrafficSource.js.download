
/*
*
* Data is stored in the __initialTrafficSource cookie in the following format; brackets
* indicate optional data and are aexcluded from the stored string:
*
* utmcsr=SOURCE|utmcmd=MEDIUM[|utmccn=CAMPAIGN][|utmcct=CONTENT]
* [|utmctr=TERM/KEYWORD]
*
* e.g.:
* utmcsr=example.com|utmcmd=affl-link|utmccn=foo|utmcct=bar|utmctr=biz

changes made by ET
*/
function populateTrafficSource() {
    var referrer = document.referrer;
    // where the customer arrives
    let landingPage = document.referrer;
    // DEFAULT VALUES IF NOTHING ELSE IS FOUND
    var gaReferral = {
        'utmcsr': 'direct',
        'utmcmd': 'none',
        'utmccn': 'not set',
        'utmcct' : 'not set',
        'utmctr': 'not set'
    };

    var thisHostname = document.location.hostname;
    
    var thisDomain = getDomain_(thisHostname);
    var referringDomain = getDomain_(document.referrer);

    var sessionCookie = getCookie_('__utmzzses');
    // we want the cookie to expire each day;
    var cookieExpiration = new Date(+new Date() + 24 * 60 * 60 * 1000);
    var qs = document.location.search.replace('?', '');
    var hash = document.location.hash.replace('#', '');

    var URLParameters = parseURLQueryParams(qs + '#' + hash);

    var referringInfo = parseGaReferrer(referrer);

    var storedVals = getCookie_('initialTrafficSource');

    var newCookieVals = [];

    var keyMap = {
        'utm_source': 'utmcsr',
        'utm_medium': 'utmcmd',
        'utm_campaign': 'utmccn',
        'utm_content': 'utmcct',
        'utm_term': 'utmctr',
        'gclid': 'utmgclid',
        'dclid': 'utmdclid',
    };

    var keyFilter = ['utmcsr', 'utmcmd', 'utmccn', 'utmcct', 'utmctr'];
    var keyName,
        values,
        _val,
        _key,
        raw,
        key,
        len,
        i;

    if (sessionCookie && referringDomain === thisDomain) {
        console.log("Session cookie and referring domain");
        URLParameters = null;
        referringInfo = null;
    }

    // URL PARAM INTERPRETER
    if (URLParameters && (URLParameters.utm_source || URLParameters.gclid || URLParameters.dclid)) {

        for (key in URLParameters) {

            if (typeof URLParameters[key] !== 'undefined') {

                keyName = keyMap[key];
                gaReferral[keyName] = URLParameters[key];

            }

        }

        if (URLParameters.gclid || URLParameters.dclid) {

            gaReferral.utmcsr = 'google';
            gaReferral.utmcmd = gaReferral.utmgclid ? 'cpc' : 'cpm';

        }

    }
    else if (referringInfo) {
        gaReferral.utmcsr = referringInfo.source;
        gaReferral.utmcmd = referringInfo.medium;
        if (referringInfo.term) gaReferral.utmctr = referringInfo.term;
    }
    else if (storedVals) {

        values = {};
        raw = storedVals.split('|');
        len = raw.length;

        for (i = 0; i < len; i++) {

            _val = raw[i].split('=');
            _key = _val[0].split('.').pop();
            values[_key] = _val[1];

        }
        gaReferral = values;

    }

    for (key in gaReferral) {

        if (typeof gaReferral[key] !== 'undefined' && keyFilter.indexOf(key) > -1) {

            newCookieVals.push(key + '=' + gaReferral[key]);

        }

    }

    // Cookie is written if it doesn't already exist
    if (!getCookie_('initialTrafficSource')) {
        writeCookie_('initialTrafficSource', newCookieVals.join('|'), cookieExpiration, '/', thisDomain);
    }

    // INJECT INTO LIFERAY AND ELOQUA FORMS

    if (gaReferral.utmcsr) {
        // Liferay form
        setInputFieldValueByLabelContent("utm_source", gaReferral.utmcsr)
        // Eloqua
        setInputFieldValueByName("utm_source", gaReferral.utmcsr)
    }
    if (gaReferral.utmccn) {
        // Liferay form
        setInputFieldValueByLabelContent("utm_campaign", gaReferral.utmccn)
        // Eloqua
        setInputFieldValueByName("utm_campaign", gaReferral.utmccn)
    }
    
    if (gaReferral.utmcmd) {
        // Liferay Form
        setInputFieldValueByLabelContent("utm_medium", gaReferral.utmcmd)
        // Eloqua
        setInputFieldValueByName("utm_medium", gaReferral.utmcmd)
    }
    if(gaReferral.utmcct){
        // Liferay Form
        setInputFieldValueByLabelContent("utm_content", gaReferral.utmcct)
        // Eloqua
        setInputFieldValueByName("utm_content", gaReferral.utmcct)
    }
    if(gaReferral.utmctr){
        // Liferay Form
        setInputFieldValueByLabelContent("utm_term", gaReferral.utmctr)
        // Eloqua
        setInputFieldValueByName("utm_term", gaReferral.utmctr)
    }
    /*     if(referringInfo.term){
         setInputFieldValueByLabelContent("utm_term", referringInfo.term)
         setInputFieldValueByName("utm_term", referringInfo.term)
    } */
    // document.referrer returns the uri of the page linked to that page if the string is empty it means it entered directly to the link
    if(landingPage){
        if(landingPage == null){
            landingPage = window.location.href;
             // Liferay Form
            setInputFieldValueByLabelContent("lc_landing", landingPage);
            // Eloqua
            setInputFieldValueByName("lc_landing", landingPage);
        } else {
             // Liferay Form
            setInputFieldValueByLabelContent("lc_landing", landingPage);
            // Eloqua
            setInputFieldValueByName("lc_landing", landingPage);
        }
    }
    writeCookie_('__utmzzses', 1, null, '/', thisDomain);

    function parseURLQueryParams(str) {

        var campaignParams = ['source', 'medium', 'campaign', 'term', 'content'];
        var regex = new RegExp('(utm_(' + campaignParams.join('|') + ')|(d|g)clid)=.*?([^&#]*|$)', 'gi');

        var gaParams = str.match(regex);
        var paramsObj,
            vals,
            len,
            i;

        if (gaParams) {

            paramsObj = {};
            len = gaParams.length;

            for (i = 0; i < len; i++) {

                vals = gaParams[i].split('=');

                if (vals) {

                    paramsObj[vals[0]] = vals[1];

                }

            }

        }

        return paramsObj;

    }

    function parseGaReferrer(referrer) {

        if (!referrer) return;

        var searchEngines = {
            'daum.net': {
                'p': 'q',
                'n': 'daum'
            },
            'eniro.se': {
                'p': 'search_word',
                'n': 'eniro '
            },
            'naver.com': {
                'p': 'query',
                'n': 'naver '
            },
            'yahoo.com': {
                'p': 'p',
                'n': 'yahoo'
            },
            'msn.com': {
                'p': 'q',
                'n': 'msn'
            },
            'bing.com': {
                'p': 'q',
                'n': 'bing'
            },
            'aol.com': {
                'p': 'q',
                'n': 'aol'
            },
            'lycos.com': {
                'p': 'q',
                'n': 'lycos'
            },
            'ask.com': {
                'p': 'q',
                'n': 'ask'
            },
            'altavista.com': {
                'p': 'q',
                'n': 'altavista'
            },
            'search.netscape.com': {
                'p': 'query',
                'n': 'netscape'
            },
            'cnn.com': {
                'p': 'query',
                'n': 'cnn'
            },
            'about.com': {
                'p': 'terms',
                'n': 'about'
            },
            'mamma.com': {
                'p': 'query',
                'n': 'mama'
            },
            'alltheweb.com': {
                'p': 'q',
                'n': 'alltheweb'
            },
            'voila.fr': {
                'p': 'rdata',
                'n': 'voila'
            },
            'search.virgilio.it': {
                'p': 'qs',
                'n': 'virgilio'
            },
            'baidu.com': {
                'p': 'wd',
                'n': 'baidu'
            },
            'alice.com': {
                'p': 'qs',
                'n': 'alice'
            },
            'yandex.com': {
                'p': 'text',
                'n': 'yandex'
            },
            'najdi.org.mk': {
                'p': 'q',
                'n': 'najdi'
            },
            'seznam.cz': {
                'p': 'q',
                'n': 'seznam'
            },
            'search.com': {
                'p': 'q',
                'n': 'search'
            },
            'wp.pl': {
                'p': 'szukaj ',
                'n': 'wirtulana polska'
            },
            'online.onetcenter.org': {
                'p': 'qt',
                'n': 'o*net'
            },
            'szukacz.pl': {
                'p': 'q',
                'n': 'szukacz'
            },
            'yam.com': {
                'p': 'k',
                'n': 'yam'
            },
            'pchome.com': {
                'p': 'q',
                'n': 'pchome'
            },
            'kvasir.no': {
                'p': 'q',
                'n': 'kvasir'
            },
            'sesam.no': {
                'p': 'q',
                'n': 'sesam'
            },
            'ozu.es': {
                'p': 'q',
                'n': 'ozu '
            },
            'terra.com': {
                'p': 'query',
                'n': 'terra'
            },
            'mynet.com': {
                'p': 'q',
                'n': 'mynet'
            },
            'ekolay.net': {
                'p': 'q',
                'n': 'ekolay'
            },
            'rambler.ru': {
                'p': 'words',
                'n': 'rambler'
            },
            'google': {
                'p': 'q',
                'n': 'google'
            }
        };

        var a = document.createElement('a');
        var values = {};
        var searchEngine,
            termRegex,
            term;

        a.href = referrer;

        // Shim for the billion google search engines
        if (a.hostname.indexOf('google') > -1) {

            referringDomain = 'google';

        }

        if (searchEngines[referringDomain]) {

            searchEngine = searchEngines[referringDomain];
            termRegex = new RegExp(searchEngine.p + '=.*?([^&#]*|$)', 'gi');
            term = a.search.match(termRegex);

            values.source = searchEngine.n;
            values.medium = 'organic';

            values.term = (term ? term[0].split('=')[1] : '') || '(not provided)';

        } else if (referringDomain !== thisDomain) {

            values.source = a.hostname;
            values.medium = 'referral';

        }

        return values;

    }

    function writeCookie_(name, value, expiration, path, domain) {

        var str = name + '=' + value + ';';
        if (expiration) str += 'Expires=' + expiration.toGMTString() + ';';
        if (path) str += 'Path=' + path + ';';
        if (domain) str += 'Domain=' + domain + ';';

        document.cookie = str;

    }

    function getCookie_(name) {

        var cookies = '; ' + document.cookie
        var cvals = cookies.split('; ' + name + '=');

        if (cvals.length > 1) return cvals.pop().split(';')[0];

    }

    function getDomain_(url) {

        if (!url) return;

        var a = document.createElement('a');
        a.href = url;

        try {

            return a.hostname.match(/[^.]*\.[^.]{2,3}(?:\.[^.]{2,3})?$/)[0];

        } catch (squelch) { }

    }

    function setInputFieldValueByLabelContent(labelContent, value) {
        // FINDS LABEL WITH SPECIFIED CONTENT
        var aTags = document.getElementsByTagName("label");
        var found;

        for (var i = 0; i < aTags.length; i++) {
            if (aTags[i].textContent == labelContent) {
                found = aTags[i];
                break;
            }
        }

        // IF WE FIND ONE
        if (found != null) {
            // FIND THE NEXT SIBLING THAT IS A DIV (THIS SHOULD CONTAIN THE INPUT FIELD)
            let nextSibling = found.nextElementSibling
            if (nextSibling.nodeName == "DIV") {
                // IF THE FIRST CHILD OF SAID DIV IS AN INPUT, POPULATE THAT INPUT WITH VALUE SPECIFIED IN PARAMETERS
                if (nextSibling.firstElementChild.nodeName == "INPUT") {
                    nextSibling.firstElementChild.value = value
                }
            }
        }
    }

    function setInputFieldValueByName(name, value) {
        // FIND ELEMENT WITH NAME ATTRIBUTE SPECIFIED
        var found = document.getElementsByName(name)

        // IF WE FIND ONE, POPULATE IT WITH SPECIFIED VALUE
        if (found.length > 0) {
            if (found[0]) {
                found[0].value = value
            }
        }
    }
}
Liferay.on("endNavigation", () => {
    console.log("END NAVIGATION");
    populateTrafficSource();
})
// why is the code running twice ??
Liferay.on("allPortletsReady", () => {
    console.log("ALL PORTLETS READY");
    populateTrafficSource();
})

// This event gets fired when a form page is shown
Liferay.on("ddmFormPageShow", () => {
    console.log("FORM PAGE");
    populateTrafficSource();
})